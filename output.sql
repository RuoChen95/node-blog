SET NAMES utf8;
SET FOREIGN_KEY_CHECKS = 0;BEGIN;INSERT INTO `blog` (title, content, create_date) VALUES ('博客搭建回顾', '<p>现在网上的博客搭建教程偏向于普通用户，在别人的CMS下进行搭建，用起来限制挺大的，想加的一些功能不太好加，而且有很多限制，所以一直就想将之前的博客进行改版。断断续续花了三周的时间总算把博客搭建完了，quip上写了四个文档，包括初步的客户端服务端构建以及两波迭代，可以说是收获满满。具体整理如下：</p><h3>前端</h3><p>前端还是老套路，Vue.js全家桶 + axios处理接口，大部分逻辑放在前端。为了方便开发，目前接口全部是用await转成同步的。图表用了百度的echarts，导致了最后的打包文件有400多kb，可能会影响到页面第一次的加载速度，之后浏览器会读取缓存，就没有太大影响。组件有三个，评论、折线图、柱形图。评论接口通过groupArea进行评论区域的区分，目前还没有做回复以及多级回复功能。IP统计的逻辑用到了三个接口，获取IP、判断IP是否今日访问过以及入表接口，前端处理。目前博客数目较少，没有做分页处理。安全上也没有做XSS防护。</p><h3>后端</h3><p>用了个最简单的node服务器，router都没写，而且接口都是get的。后端目前就是个练习写sql的地方，逻辑比较简单，对于页面的性能没有什么比较大的影响。比较坑的地方是时间的处理，需要后端自己转成合适格式的字符串再传给前端，但是\'true\'或者\'1\'这种字符串会自动转成对应的布尔值或者数字。</p><p>获取IP的接口需要在nginx上进行配置才能生效。统计接口需要在SQL种进行适当的处理。</p><p>一开始我还想研究下如何显示接口的加载情况，后来发现主要就是sql语句，并没有提供一个方法来告诉用户sql执行的情况。所以现在所有的loading条都是模拟的，这样做感觉没什么意义。除非像上传图片那种流传输可以做精确的百分比加载提示。</p><h3>数据库以及数据处理</h3><p>数据库直接用最通用的mysql，npm有个包能够直接引用很方便。数据处理上写了个简单的node，先将md文件转成html形式的字符串，然后转成合适的sql输出为sql文件即可。</p><h3>云服务器部署以及nginx配置</h3><p>服务器用了Amazon aws的Lightsail，最简单。一开始的配置上选了node.js服务器，注意需要将上面的nginx配置删掉/停止然后换成自己的。目前我的nginx配置如下：</p><code>events {    worker_connections  1024; #并发数}http {    server {        listen 80; #监听端口        # 静态文件        location / {            try_files $uri $uri/ @router;            root  /data/www;            index index.html;        }        location @router {            rewrite ^.*$ /index.html last;        }        location /js/ {            root /data/www;        }        location /css/ {            root /data/www;            types {                text/css css;            }        }        location /img/ {            root /data/www;        }        #接口路径        location /blog/ {            proxy_set_header X-Real-IP $remote_addr;            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;            proxy_set_header Host $http_host;            proxy_set_header X-NginX-Proxy true;            proxy_pass http://localhost:8888/blog/;            proxy_redirect off;        }    }}</code><p>由于是单页面应用，根目录需要进行router的配置，为了获取用户IP，需要在接口路径中增加proxy_set_header选项。开发流程是先本地跑通，然后build后在本地nginx跑通，最后在服务端跑通。部署流程是先将文件传到github上，然后在服务端clone下来进行手动的部署。后端服务的部署用了pm2。域名是在godaddy上买的。</p><h4>附录</h4><ul><li>博客初步构建：https://quip.com/Oyx6AAiIGj4j</li><li>服务器部署：https://quip.com/9tjyAPaWGEmY</li><li>第一次迭代：https://quip.com/VLOFA5nYG2ur</li><li>第二次迭代：https://quip.com/KMldAae1pnUr</li></ul>', '2019-11-17'),('托福回顾', '<h3>关于如何准备</h3><p>单词上必须通过那本托福核心词汇，通过听写的形式。我的话第一次掌握的不是很好，然后又过了一遍。</p><p>阅读除了做完教材上的题目以外，需要进行限时练习。我的具体的策略是花6分钟通读全文并且做好每段内容的笔记，然后做题。这样对于全文能有个大致的把握。做完后对于错题要有一定的原因分析，原因通常有：细节/理解；选项理解；时间没来得及看；文章大意；词汇；推断等。应该尽量避免推断、词汇、文章大意的错误。</p><p>听力在准备上需要进行精听。精听策略是在刷TPO的时候挑出自己错最多的那一篇，三到四题的那种，然后进行单次精听。我比较喜欢打字，所以打到了电脑上。听写完成之后将答案拷贝到另外一篇文章上，在屏幕的左右两边进行对比。做完后也要进行错题的原因分析。</p><p>口语必须在考试的节奏上进行练习。可以打开一直录音功能，练习完成之后如果有一些特别不好就再尝试一下并且进行记录。写作也需要进行限时练习。写完之后可以和小站上的范文进行比较。像这种输出类的可能一开始比较困难，但是多说多写后就能克服之前的困难了。</p><h3>关于启德的老师以及tutor</h3><p>课上需要认真听讲以及记笔记，最好准备四个笔记本不然很容易乱。</p><p>阅读和听力老师会梳理所有的题型，然后对于单词会进行细致的归纳，前者通过词根词缀，后者通过单词意群。听力老师还指出了很重要的考点：列举、反面强调、why mention以及作者态度，对应这些考点的也有具体的记笔记的方式。阅读老师很厉害，听他的课能涨很多见识。</p><p>口语以及写作老师会教具体的答题结构，都是容易应用并且有效的方法。上写作老师的课很开心很放松。</p><p>tutor主要是监督作用，每次打卡都会发到tutor建的一个群里面，然后也进行了单词的听写。tutor小姐姐人也很好，给了我很多鼓励。</p><h3>其他</h3><p>托福前前后后准备了三个半月时间，最后的全力准备花了差不多一个月，最后运气比较好达到了目标分。回想起来考试需要足够的信心，有信心才更愿意花费在时间在上面。我两次模考的结果都不是很理想，但是我把自己能做的大部分都完成了，最后也取得了自己想要的分数。除此之外，考前也需要好好休息，这样考试的时候也能轻松一点。</p>', '2019-6-17');COMMIT; SET FOREIGN_KEY_CHECKS = 1;