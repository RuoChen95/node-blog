SET NAMES utf8;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
--  Table structure for `blog_db`
-- ----------------------------
DROP TABLE IF EXISTS `blog`;
CREATE TABLE `blog` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL DEFAULT '',
  `content` TEXT(21845),
  `create_date` date,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;
SET NAMES utf8;
SET FOREIGN_KEY_CHECKS = 0;BEGIN;INSERT INTO `blog` (title, content, create_date) VALUES ('The Basic of Font-end Web Development', '<p>本文是维基百科相关页面的翻译，主要介绍了前端编程的三大工具以及发展目的。</p><p>前端网络编程，也被认为是用户端编程，是为了网页或者网页应用，而编写HTML，CSS以及JS代码，所以用户能够看到并且和这些页面进行交流。前端网络编程的挑战在于用于实现前端页面的工具以及技术变化得很快，所以工程师需要不断注意产业是如何发展的（例如去年的ECMAScript 6）。</p><p>设计网页的目的在于：确保用户打开站点的时候，信息是以容易阅读并且相互关联的形式呈现的。随之带来的问题是，现在用户实用大量的设备来访问网页，这些设备具有不同的屏幕尺寸以及清晰度。所以设计者在设计网页的时候需要注意这些方面。他们需要确保他们的网页在不同的浏览器、不同的操作系统以及不同的设备上显示正确，这需要在工程师端进行仔细的计划。</p><h2>前端网络编程所使用的工具</h2><p>这里有一些工具能被用于进行前端编程，理解工具最适用于哪些任务，这有助于产生一个高质量的、可升级的站点。</p><h4>超文本标记语言（HTML）：</h4><p>HTML是任何网页工程程序的骨架，没有它网页不会存在。超文本标记语言能提供站点总体的样子。HTML被Tim Berners-Lee所发展。随着HTML的发展，在万维网中产生了许多版本。最新版本的超文本标记语言被称为HTML5，在2014年0月28日被W3所推出。这一版本包含了新的并且高效的方式来传输元素，例如音频以及视频文件。H5在前端工程师中非常受欢迎。和老的版本相比，HTML5有很多特点。</p><p>随着HTML的发展，在网络中产生了一场革命。现在，世界开始通过同一种语言相互交流，那就是超文本标记语言。其由两种部分组成，第一是<strong>超文本</strong>（就是超链接），第二是<strong>标记语言</strong>。</p><h4>层叠样式列表（CSS）：</h4><p>CSS控制了站点的样子，让你的站点有自己独有的外观。其实现形式是：保证样式列表先于其他的样式规则，由其他的输入形式所影响，例如屏幕的尺寸和分辨率。</p><h4>JS：</h4><p>JS是基于场景的命令式语言（和HTML的说明性语言不同），用于将静态的HTML界面动态化。JS的代码能使用HTML标准提供的<strong>文档对象模型</strong>（DOM），来根据事件，例如用户的输入，操纵网络页面。</p><p>使用一种被称为<strong>异步JavaScript和XML</strong>的技术（AJAX），JS代码也能动态的改变网页的内容（与原始的HTML页面端相独立），并且也能回应服务端的事件，让网页体验增加了真正动态的特性。</p><h2>发展的目的</h2><p>前端工程师牢记以下要点，使用可获得的工具以及技术来到达后端。</p><h4>可达性：</h4><p>随着移动设备（例如例如手机和平板）的持续发展，设计者需要确保他们的站点在所有的设备中的浏览器正确运行。这能通过在CSS的样式列表中使用响应式的网页设计</p>', '2016-11-12'),('The Picture of DorianGray', '<p>这几天翻完了19世纪爱尔兰唯美主义作家王尔德的著名小说《道连·格雷的画像》，见证了一个俊美的青年是如何被一些话语教唆成为罪恶之人。小说中传达出来的一些东西需要自己警醒。</p><p>1.生活需要真实</p><p>不真实的生活是道连最后悲剧的原因之一，在其人生后期，其掩盖自己的身份在贫民窟逗留，吸食鸦片欺骗他人，甚至杀害了自己的朋友，但还觉得这只不过是自己人生的小小污点。这种不真实到最后还是被他人所察觉或是怀疑。在小说的最后，两位绅士对于道连的生死的反应是：“冷笑一声走掉了”。很明显在道连所处的阶级中，其风评是很差的。</p><p>2.需要珍惜时间</p><p>20岁出头的时间是最为宝贵的。道连·格雷的人生最有戏剧性质的就是其容颜一直保留在20多岁，但是其灵魂是越来越不洁的，而这种道德上的变坏表现在了他早年肖像画上。直至他40岁决定破坏那幅画而导致自己死亡的时候，他内心的污秽才在他的肉体显现了出来。无论如何，20多岁是一个人精力和颜值的巅峰，作者正是以道连·格雷“永恒的”20岁的美好外貌来和内心的不断堕落来做对比，强化了文章的戏剧性，为最后的悲剧结局做好了铺垫。</p><p>3.生活是感性的</p><p>生活是个神经的问题，纤维的问题，是逐渐进化而成的细胞的问题，其中埋藏了思想，激情在其中有着它的梦。我们生活所依靠的不过是屋子里或早上的天空里一抹随意的颜色；曾经爱过的一种带着你细腻的回忆的特别香味；偶然遇见的已经忘却的诗行；或是已经不再弹奏的乐曲中的一段旋律。</p>', '2016-9-26'),('一个公司需要什么样的人才', '<p>无论是大学本科，研究生还是出国，上学最终的目的是去某家公司工作。所以，在上学的时候明确公司需要什么样的人才是十分重要的，而这一要求，在各大招聘网站中的招聘要求中有明确写出，现加以分析整理如下：</p><h2>团队合作能力</h2><p>公司是一个团队，代表了一群人一起完成某样任务。作为团队的领导，要明确各个队员的分工；作为队员，要保证完成自己的任务，这样公司才能持续创造价值。所以公司对于经理的要求是要有创造力、活力来分配好工作并且保证工作完成，对于员工的要求是有团队协作能力。</p><p>为了保证团队合作能顺利进行，在集体中的每个人都要学会一件事，那就是多说。语言让人在大尺度上学会了合作。交流就像润滑剂，不但能减少误会的产生，还能提高合作的效率。交流可以在合作时交流，也可以在合作后（生活）交流。</p><p>为了保证团队合作能有成果，每个人的必须是以结果为导向的(result directing)。如果一个团队大家都很忙，但是没有结果，那只是瞎忙。优良的成果的一个很重要的一点就是能被社会理解。这要求这个成果可以被复制。例如在科学研究中，很强调实验成果的可复制性，这样这个成果才是不虚假的，可以依赖的(reliable)，可以形成结论。</p><h2>个人的有序</h2><p>当一个个体加入了某一团体之后，为了完成上级分配下的任务，公司会要求其需要有计划(well-organize)，高效的完成。一个人如果做事无序，三心二意，最后往往难以完成任务或者任务的完成度很低。对于大学生，就像在去自习的时候玩手机，最后导致整个晚上都被浪费了。</p><p>一个目标的实现，是需要一步一步来的，不可能一口吃成个胖子。所以，大的目标是需要分为多个小目标的。此外，明确目标完成的具体指标也十分重要。例如仅仅说要去锻炼是不够的，而需要有具体的计划，例如上午慢跑30分钟，晚上练习平板支撑5分钟。因此，对于目标的分解(division)以及特化(specification)是有序的前提。</p><p>除此之外，有序还需要做到连续。连续可以分为两个角度：工作的连续以及关系的连续。工作的连续需要人不断产出(hard working)，当老板发现你在玩手机心中肯定会大大失望的。这也是为什么考试是连续的，除非时间特别长的考试，例如4小时以上的，才会有很短的时间（10分钟）来让你休息。能保持长之间的专注的人才是一个公司所需要的。此外，由于公司的运作是持续不断的，所以人与人的关系是有连续性。这种关系并不会随着某一任务的结束而终止。</p><p>总的来说，公司最关心的事有两件，一件是你能不能做好这件事，另外一件是你能不能和他人一起做好这件事。这两个点完全可以在求职之前加以锻炼，以提高自己的竞争力。</p>', '2017-4-19'),('我是如何构建博客的', '<p>本文主要的目的是梳理如何我在使用github.io、jekyll以及jekyll-now搭建博客所踩过的坑、心得以及遗留下来的问题。目标读者是想自己搭建博客的人。</p><p>文章会一点点更新。</p><p>首先，github.io是简单的博客服务器，只要你有github的账号，就能搭建自己的博客，github.io所搭配的框架就是jekyll。</p><p>安装jekyll需要ruby以及ruby Gems：</p><ol><li>ruby的版本需要大于2.2.5，小于2.5，windows具体安装地址是<a href="https://rubyinstaller.org/downloads/">这里</a>；mac的具体安装可以通过gem包管理器</li><li>ruby --version无效的话需要换个目录文件夹安装</li><li>在安装的时候只用勾选PATH那项，不用安装msy32</li></ol><p>安装完后运行jekyll serve如果报错：&lt;code&gt;jekyll 3.8.5 | Error:  No such file or directory&lt;/code&gt;，需要检查当前目录是否正确。</p>', '2017-4-8'),('Liferay实践回顾', '<p>liferay是一个开源Java库，通常是作为企业的内网系统。这个库将页面的不同元素，例如日历、开会计划等作为模版，用户可以通过模版来组织页面格式。由于公司项目要求，已经学习、使用了一段时间。以下是主要的学习进程，很多东西没有用到，但是需要记录。</p><h2>通过配置文件开发</h2><h3>加载自定义CSS</h3><p>通过管理员账号登陆后，在导航-页面-配置-外观和风格-CSS中直接导入想要改变的CSS代码即可。主要通过className来区分页面。注意页面的配置中的外观和风格处选择“使用和私有页面相同的外观”，而不要选“为此页面定义一个独有的外观”。</p><h3>载入HTML</h3><p>lifery 的wiki portel中的一项支持HTML代码，并且为表格文档提供编辑器，能让用户自己编辑表格。表格的格式可以通过CSS改变。这个portel还有一个特点，就是可以支持单页面以及js行为控制，这就配合css的&lt;code&gt;display:hidden&lt;/code&gt;等属性，能够实现页面的定制化。</p><h3>执行JavaScript</h3><p>如果需要动态改变CSS，需要导入JavaScript，这个时候可以在导航-页面-配置-高级的-JavaScript中加上你需要的代码，这会被全局应用。框架已经自带jQuery，但是没有Boostrap。</p><h3>lar包</h3><p>上述内容都配置完之后，可以在系统的导出界面导出lar包，然后可以在默认界面中将lar包进行导入，应用样式、结构以及portel。lar包可以通过<a href="http://blog.csdn.net/caroline_wendy/article/details/42190743">相关</a>命令行进行解压以及压缩。&lt;a title=&quot;17.5.31&quot;&gt;目前&lt;/a&gt;的问题是导入导出后会报出&lt;code&gt;java.lang.NullPointerException&lt;/code&gt;的问题。</p><h2>通过命令行开发</h2><h3>环境</h3><p>需要三大类环境：node，npm；yeoman；SASS from Ruby。根据<a href="https://dev.liferay.com/zh/develop/tutorials/-/knowledge_base/7-0/themes-generator">教程</a>配置即可。但是，npmrc文件如果按照上面要求修改，环境会报错安装不上，npm在后续构建theme的时候也会报错。</p><h3>portal_normal.ftl</h3><p>../&quot;theme name&quot;/src/templates/portal_normal.ftl文件是liferay模版文件，改了其中的代码后可以直接在主页中显示出来，是主要需要进行修改的地方。具体可以直接调用的模版是宏（<a href="https://dev.liferay.com/zh/develop/tutorials/-/knowledge_base/7-0/freemarker-macros">macros</a>）,其中的date宏不能直接调用，control_menu如果已经有了调用后会和已有的重叠，breadcrumbs只能调用一次，user_personal_bar就是一个简单的小用户界面。</p><p>调用后在theme文件中使用&lt;code&gt;gulp deploy&lt;/code&gt;就能生成build文件，然后在对应的tomcat文件夹中用.sh文件部署服务器即可实现这份ftl文件的改动，注意需要在feel and look中选择相应的样式。样式方面，可以通过改变_custom.scss实现。</p><p>目前的问题，无法自定义宏以及不知道连接前后端。</p><h3>Liferay Theme Generator</h3><p>激活代码是&lt;code&gt;yo liferay-theme&lt;/code&gt;</p><p>使用yeoman引入这个主题构建器，这个构建器会创建好一个主题的架构。在文件中会有一个src文件夹，这个src文件夹会存储进行改动的文件。其中的CSS文件是以Sassy CSS文件存储的。这个构建器还能通过&lt;code&gt;yo liferay-theme:layout&lt;/code&gt;以及&lt;code&gt;yo liferay-theme:themelet&lt;/code&gt;来改变页面的基础布局以及增加小组件。目前的问题如果使用这个方式，将theme构建好之后不知道如何应用到已经在tomcat上跑起来的页面中……</p><h2>通过Eclipse开发</h2><h3>Liferay IDE</h3><p>这是一个liferay的eclipse插件，可以通过eclipse插件广场上搜索下载。安装这个插件之后，在加上Java 8，就能新建基于liferay的项目了。</p><h3>liferay SDK</h3><p>这是一个liferay的工具包，在新建项目的同时，需要将这个工具包所对应的文件位置引用一下。目前有个问题，就是文件引用的时候会报出“Invalid SDK settings. Configure app.server.parent.dir property in build.admin.properties to point to Liferay home”错误，解决方式就是找到build.properties文件，讲文件名称改成build.&lt;你的电脑名字&gt;.properties,然后在其中的app.server.parent.dir的值改成liferay portal的绝对路径。</p><h3>liferay portal</h3><p>这是liferay所构建的JAVA页面，其中包括用于渲染页面的tomcat文件。它能体现liferay的基本的功能，但是没办法改样式。</p><h3>liferay portal SRC</h3><p>这是liferay的工程源码，可以通过软件导入，不能用eclipse，文件格式也不是mavern。由于整个门户过于复杂，源码分析不现实，如果需要改样式的话需要通过新建模版完成。</p>', '2017-5-8'),('OKR页面构造实践以及工作回顾', '<p>想要做的事情</p><ul><li>建立对自己的信任</li><li>make something original and worthwhile</li><li>发现美好的东西，使用并感受其美好</li><li>创造美好的东西，有利于个人以及集体进步的东西</li></ul><p>不应该做的事情</p><ul><li>晚睡晚起</li><li>迟到</li><li>不吃早饭</li><li>编写自己都看不懂的代码</li><li>在公司的工作时间做与工作以及学习无关的事情，例如浏览购物网站或者在游戏里抢红包</li><li>代码重复使用的时候不进行封装</li><li>不使用className而进行遍历搜索</li><li>表达不圆润，推卸责任</li><li>有意识的明确表达函数内作用域</li><li>对于任务的完成时间没有精确的估计</li><li>测试的时候没有回归到初始化状态</li></ul><p>应该继续保持的事情</p><ul><li>在做的时候自己探索、明确页面逻辑</li><li>先完成正确、关键、最简化的代码，然后对这代码进行复用以及扩展，考虑一些特殊情况</li><li>使用each()等非for迭代函数(函数化编程)</li><li>做一些需求之外的必要的功能</li></ul><p>需要做的事情</p><ul><li>有一定的艺术感，对比性，进行对比度的测试</li><li>多吃东西，锻炼身体</li></ul>', '2017-7-13'),('vue技术实践回顾', '<p>本文的主要目的是梳理过去三个月的时间在公司使用vue的经过，碰到的相关信息，以及需要改进的问题。目标读者是对vue以及前端有兴趣的人。</p><p>本文会一直更新，直到商城全部重构完成。</p><p>Vue.js是一个开源Javascript框架，用于构建用户界面，由于是数据驱动的，不用查找DOM元素，所以这个框架能够简化代码，加快开发速度。Vue还有官方library，包括用于控制路由的vue-routing，也有用于状态管理的vuex。Vue的主要功能比较简单，容易入手，功能相对来说比较全面，所以我们决定使用vue。</p><h2>vue下的登录</h2><p>用户登录比较复杂，目前了解到，其涉及到4处服务器：</p><ol><li>本机（用户）</li><li>登录服务器（接口提供方）</li><li>cas服务器（公用）</li><li>redis服务器（公用）</li></ol><p>登录的具体步骤为：</p><ol><li>PC打开网页，向登录服务器发送请求，由于没有ticket，登录服务器返回401；</li><li>PC重定向到cas服务器，进行登录，登录成功后cas服务器生成ticket传给PC端，并且生成对应的ticket表（包括用户信息以及对应的），并将ticket表上传到redis服务器中。</li><li>PC获取ticket后再向登录服务器发送请求，登录服务器获取ticket后到redis服务器中进行核对，核对通过，登录成功。</li></ol><p>补充：第二部成功后，cas服务器会生成JSESSIONID，种植到浏览器的cookie中；登录服务器通过校验用户名 + JSESSIONID + ticket来判断用户是否登录了。</p><h2>vue的组件封装</h2><p>vue的生态繁荣，框架比较多，在UI工具上，我们用了elementUI以及iviewUI。这些UI工具其实就是一些封装好的组件，用法官网上写得很明确了。</p><p>样式自定义：需要去App.vue文件中进行全局修改，不能在不同的组件文件中进行修改，否则会由于vue的组件绑定机制导致修改失效。<a href="https://www.iviewui.com/docs/guide/theme">iview</a>上说的变量覆盖方法并非最简。</p><p>组件功能复用：使用<a href="https://cn.vuejs.org/v2/guide/mixins.html#%E5%9F%BA%E7%A1%80">混合</a>，此部分待续...</p><p>普通组件以及实例化组件：框架自带的实例化组件只能同时使用一个，所以有的时候需要两者共同使用。</p><p>父子组件通信：上行使用“:”，下行使用“@”，具体用法可见官网。父子组件通信也可以用vuex，但是vuex + 异步传输存在问题。</p><h2>接口对接</h2><p>进行重构的很重要一点就是要注意之前的接口是如何写的，这样才能全面了解项目的需求以及代码量。除此之外，开始mock接口前需要花一些时间来核对接口的合理性，接口确定后尽量不要修改，这样就能加快开发速度。</p><p>在对接时，要和后端沟通好，接口之后必然有修改，要预留足够的修改时间。</p><h2>功能封装</h2><p>详见下一篇文章。</p>', '2018-1-1'),('博客改版计划', '<p>当前我的博客是直接用了https://github.com/barryclark/jekyll-now的项目代码，可以说它的&quot;developer experience&quot;非常的好。</p><ol><li><p>具体文章可以在_posts文件夹内进行更新</p></li><li><p>项目文件打包后直接放到projects中，然后在_layouts文件夹中的experience.html配置路径。router是根据文件路径自动生成的。例如todoApp的index.html的路径为projects/todoApp，则路径为&lt;code&gt;{{ site.baseurl }}/projects/todoApp&lt;/code&gt;</p></li></ol><h3>新版博客计划</h3><ol><li><p>用vue</p></li><li><p>部署</p></li></ol><p>这么做的原因是为了增加对于博客的控制，以便之后增加评论以及统计功能。</p><p>还有一点就是&quot;Creating the resource plugin&quot;。</p><p>P.S. 目前计划搁置中</p>', '2018-12-14'),('Git rebase', '<p>今天下午，花了小半天的时间看了下git文档的分支部分，目的是学习一下git rebase，分支的操作其实有以下三种：</p><h3>本地分支合并</h3><p>监控当前文件：git add 文件名 (每次文件修改都要add一下，不然不会监控上)</p><p>查看分支：git log --oneline --decorate --graph --all</p><p>如果要查看哪些分支已经合并到当前分支，可以运行 git branch --merged</p><p>遗留问题：git branch -d test 删除test分支 其实还可以通过git checkout test回归，这是为啥？（如果出现：error: The branch \'testing\' is not fully merged.，正如字面意思一样，需要合并下）（顺便：远程分支通过 git push origin --delete test 删除，这个时候不能通过checkout回归，这个时候如果要<a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF#_%E6%8B%89%E5%8F%96">恢复</a>怎么办）</p><h3>远程分支合并</h3><p>git merge origin/master</p><p>然后会出现报错，需要<a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6#r_basic_merge_conflicts">处理冲突</a>。</p><p>git add + &quot;冲突文件的relative path&quot;</p><p>git commit + 回车：这个时候会出来vi文本编辑器，编辑完成后，push即可。</p><h3>变基</h3><h4>人员A的行为(想将子分支合并到master上)</h4><ol><li><p>去子分支；git rebase master</p></li><li><p>处理冲突；</p></li><li><p>(指针哈希值，奇怪) git add README.md</p></li><li><p>(指针哈希值，奇怪) git rebase --continue</p></li><li><p>git会自动跳回到了experiment分支，变基完成</p></li></ol><h4>人员B的行为（之前在master分支上开发）</h4><p>理想情况下直接git fetch之后merge。除此之外，需要一些特殊的<a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA#r_rebase_rebase">解决方法</a>。&quot;总的原则是，只对尚未推送或分享给别人的本地修改执行变基操作清理历史，从不对已推送至别处的提交执行变基操作&quot;。</p>', '2018-12-19'),('工作回顾以及未来打算', '<p>最近公司的首页第二次改版基本弄完了，昨天也把一些编写得比较随意的代码进行了优化，又来到了比较&quot;闲&quot;的时候，是时候进行一些计划了。之前&quot;闲&quot;的时候去看了一些<a href="https://github.com/RuoChen95/imooc-nuxt-study-project">服务端部署</a>以及<a href="https://github.com/RuoChen95/imooc-express-movie-project">express</a>的知识，但是只涉及皮毛，而且没有一定的计划和目标，浪费了一些时间。</p><p>之前在简书上有一些回顾，分别在去年<a href="https://www.jianshu.com/p/bfd2798924f8">8月</a>，<a href="https://www.jianshu.com/p/1e9358f4a3db">10月</a>以及今年<a href="https://www.jianshu.com/p/5ffe75782434">3月</a>。</p><blockquote><p>如果没有执行力以及规划力，迟早会被淘汰，这在任何行业都是如此。</p></blockquote><h3>时间</h3><p>目前工作日会8:15~9:45起床，然后9:15~10:00到公司。然后看一下jira，根据上面分配给自己的bug/task进行工作；或者回忆一下给自己分配的任务，给自己建task后开始工作。中午依旧会11:30去吃饭，然后12:45回来，中午会看书/玩游戏，到1:30后睡半小时然后在2:00开始进入工作状态。完了后有一段时间和同事一起在6:00～6:10下班，现在去楼下吃饭。照理说早下班的话应该9:00到公司，才能有8小时工作时间。目前基本不存在加班的情况，每周四有上线，需要进行值班，但是通常也在晚上8:00完事。由于部门人多，部门上已经好久没有聚餐了。</p><p>关于下班进行学习的策略，目前比较喜欢的方法是去星巴克学习，还能增加认识人的机会。这么做差不多能满足下班后七点到九点2小时的学习时间。周末的话可以去一下午，到三个小时左右。</p><h3>内容</h3><p>很难对学习内容进行确定。在上几篇回顾中，我有一些计划，但是其比较模糊，完成情况也并不理想。毕竟，&quot;自我学习&quot;，不但缺少提纲，还缺少测验，最终导致了自己缺少对于进度的把控以及中途的放弃。</p><h4>学习服务器端网页编程</h4><p>目前的，以及之前比较闲的时候的好长一段时间，可以说自己将目标模糊的确立为<a href="https://developer.mozilla.org/zh-CN/docs/Learn/Server-side">服务器端网页编程</a>。从&quot;前端&quot;转向&quot;后端&quot;是一个十分自然的行为。这对于知识才有完整的把握，而且也是官方(MDN)所<a href="https://developer.mozilla.org/zh-CN/docs/Learn/Server-side">推荐</a>的：&quot;在现代的网页开发世界里，学习服务器端开发是高度推荐的&quot;。</p><p>关于服务器端网页编程的具体技术，已经进行了很长一段时间的&quot;瞎学&quot;。需要进一步花时间分析，初步计划是先去Wiki上看看，或者<a href="https://blog.youxu.info/2012/02/02/software-tools-1/">如徐宥所说</a>去找一本非常简单的书熟悉领域模型，获得一个 Big picture，而非上来就想着要解决手头的问题。</p><h4>学习JS</h4><p>工作中学到了很多，Vue.js，异步，原型链。甚至有的时候并不理解这个知识，但是已经用得很多了。接下来，需要看<a href="https://book.douban.com/subject/26351021/">一些书</a>，总结一些解决方案。</p><h4>学习Git</h4><p>目前不懂<a href="../Git-rebase/">git rebase</a>。其他的中级知识，例如git revert也得找个时间总结下。</p><h4>深化</h4><p>最近<a href="https://www.forbes.com/sites/rajatbhageria/2017/09/10/is-learning-how-to-code-still-worth-it/#5cb5bb0b75a1">有一篇文章</a>提到，学习&quot;web-app&quot;是缺少竞争力的。<a href="https://www.jianshu.com/p/28885fd80348">具体解决方案</a>除了除了学习ML，blockchain等替代性低的知识；也需要了解编程之外的例如经济以及新闻知识。</p>', '2018-12-19'),('服务端编程基础(Node)', '<p>二年又一个月之前，我从这篇<a href="https://www.jianshu.com/p/85b93bd0779d">翻译</a>开始，进入了网页开发领域。当初我写下这篇翻译开始，万万没有想到我当初一时的兴趣会引导我进入<a href="../%E5%B7%A5%E4%BD%9C%E5%9B%9E%E9%A1%BE%E4%BB%A5%E5%8F%8A%E6%9C%AA%E6%9D%A5%E6%89%93%E7%AE%97/">现在的生活</a>。</p><p>这两年的前半部分时间，由于&quot;生存以及未来&quot;的压力，在比较恶劣的条件下进行学习。后来自己住后，由于生活稳定，反而越来越远离于自我提高了。对于知识，简单的满足于<em><strong>了解</strong></em>，而没有进行<em><strong>吸收</strong></em>。在不了解的领域，依旧是属于<a href="https://blog.youxu.info/2010/02/03/informed-ignoranc/">无知的状态，也没有耗费心力将无知转为有知</a>。</p><p>对于知识的正确态度是<a href="https://segmentfault.com/q/1010000001589389#a-1020000001637923">强调工程实践</a>，而社会上的工程实践其实就是工作。那么目前主流的工作要求是什么就具有一定的指导价值了。目前<a href="https://www.lagou.com/jobs/5279599.html">京东</a>的全栈要求如下：</p><ol><li><p>统招全日制本科及以上学历，8年以上工作经验</p></li><li><p>掌握JavaScript基本原理，熟悉ES5/ES6特性，理解函数式与面向对象特点；</p></li><li><p>熟悉Web性能优化、浏览器基本原理、网络安全等相关知识；</p></li><li><p>熟悉常见Web框架，对实现原理有深入认识，熟练使用主流前端框架至少一种；</p></li><li><p>了解前端自动化、熟悉webpack、gulp等工具，有浏览器兼容问题处理和性能优化经验可优先考虑。</p></li></ol><p>加分项：</p><ul><li><p>具有React Native, Electron开发经验优先；</p></li><li><p>node.js（Koa，express）项目开发经验，精通数据库技术，mySQL, redis或Mongo DB.</p></li><li><p>熟悉<a href="http://www.ruanyifeng.com/blog/2017/05/websocket.html">WebSocket</a>，Mqtt，xmpp 加分</p></li></ul><p>目前思路就是很清晰了，学习node、Redis、mySQL、<a href="http://www.ruanyifeng.com/blog/2017/05/websocket.html">WebSocket</a>（目前我心目中的服务端编程基础的&quot;big picture&quot;）。</p>', '2018-12-20'),('网络编程基础', '<p>在<a href="../%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80(Node)">上一篇文章</a>中，提到了一句话：Node.js将简单的脚本语言（JS）和<em><strong>Unix网络编程</strong></em>结合在了一起[<a href="https://books.google.com.hk/books?id=ZH6bpbcrlvYC&amp;printsec=frontcover&amp;dq=nodejs&amp;hl=en&amp;sa=X&amp;redir_esc=y#v=onepage&amp;q=nodejs&amp;f=false">1</a>]。那什么是Unix网络编程？什么是Unix编程？什么是Unix？</p><p>以下内容源自维基百科<a href="https://en.wikipedia.org/wiki/Unix">Unix页面</a>的翻译：</p><p>Unix是一系列多任务、多用户的计算机操作系统，源自于AT&amp;T Unix，其在19世纪80年代在贝尔实验室被Ken Thompson、Dennis Ritchie等人开发完成。</p><p>Unix系统以模块化设计为特点，有的时候被称作Unix哲学。这个概念包括操作系统需要提供一系列简单的工具，每一个工具提供了一个受限的，定义清晰的功能，将统一化的文件系统、shell脚本以及命令语言（Unix脚本）作为主要交流手段。Unix将其作为第一款便携式操作系统，以和其先辈进行区分。几乎整个操作系统是以C语言所编写的，所以让Unix能有宽广的平台。</p><p>所以Unix就是一系列操作系统，Unix编程就是面向这些操作系统写应用，Unix网络编程就是面向这些操作系统写网络应用。</p>', '2018-12-24'),('Array.map，forEach，filter以及reduce', '<p>目前在学习函数式编程，以前浏览过但是一直没用，这次打算尽可能用到这一思想。</p><h3>Array.map</h3><p>其相当于强制遍历这个Array，如下代码：</p><pre><code>    var array1 = [1, 4, 9, 16];        const map1 = array1.map(function(x) {    	if (x &gt; 1) {        	return x        }    });        console.log(map1);</code></pre><p>这个代码会返回<code>[undefined, 4, 9, 16]</code>。</p><h3>Array.forEach</h3><p>其为map的弱化版，并不会返回一个新的array，如下代码：</p><pre><code>    var array1 = [1, 4, 9, 16];    var map1 = []    const map2 = array1.forEach(function(x) {    	if (x &gt; 1) {        	map1.push(x)        }    });        console.log(map1, map2);</code></pre><p>这个代码会返回<code>[4, 9, 16],undefined</code>。forEach的速度通常要比map<a href="https://codeburst.io/javascript-map-vs-foreach-f38111822c0f">慢</a>。</p><h3>Array.filter</h3><p>其对于map进行了优化，如下代码：</p><pre><code>    var array1 = [1, 4, 9, 16];        const map1 = array1.filter(function(x) {    	if (x &gt; 1) {        	return x        }    });        console.log(map1);</code></pre><p>这个代码会返回<code>[4, 9, 16]</code>。</p><p>比较常用的做法是链式调用<code>const map1 = array1.filter(FUNCTION).map(FUNCTION)</code>。</p><p>补充：slice和filter的区别：小数据一样快：https://jsperf.com/ruochen-slice-vs-filter；大数据slice快：https://jsperf.com/slice-vs-filter``</p><h3>Array.reduce</h3><p>我对于reduce理解是其通常用于&quot;降低数据复杂度&quot;。<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Grouping_objects_by_a_property">如下代码</a>，函数体内return的数据会赋值到下一次循环中的acc中。</p><p>值得一提的是，这些方法和ARRAY.slice()类似，并不会影响到原有数组（在这个例子上为array1）</p>', '2018-12-4'),('npm package技术实践', '<p>基本目的：将vue组件上传到npm文件服务器上，方便不同项目的调用，做到组件的解耦以及脱水。目前计划尝试解耦新做的coupon组件，后续计划解耦页面头尾，步进器。</p><p>需要进一步学习：</p><p>vue方面：</p><ul><li>父子组件事件传递（已完成）</li><li>插槽slot（已完成）</li></ul><p>npm方面：</p><ul><li>上传npm package及其使用（已完成）</li><li>webpack的构建步骤/将vue文件编译成js文件/build a vue component library</li></ul>', '2018-7-15'),('前端频控实践', '<p>需求背景：用户快速点击步进器的时候，每次增减都通过了前端校验，需要传至后端进行校验，需要控制传参的频率，降低服务器压力。</p><p>参考：</p><ul><li>https://cn.vuejs.org/v2/guide/computed.html中的debounce</li><li>https://lodash.com/docs#debounce</li></ul><p>在线demo：</p><ul><li>https://codepen.io/a7304795/pen/ZvLQyz</li></ul><p>基本思路：</p><p>使用lodash的debounce参数实现频率控制。由于需要进行异步请求，经过尝试发现，将方法放在data内部，而非method内部能够实现方法的正确调用。具体代码如下：</p><pre><code>// install loadashimport _ from \'lodash\'export default {    data () {        ajax: _.debounce(async function (subProduct, index) {            let data = await this.change(subProduct.shopcartId, subProduct.productCount)            if (data.code == &quot;0&quot;) {                // 通过后的行为            }        }, 300)    },    //...    methods: {        decrease (index) {            if (前端校验) {               this.ajax(subProduct, index)             }        }    }}</code></pre><p>细节问题：</p><ul><li>debounce的原生JS实现：使用setTimeout()方法设置一个定时器。</li><li>debounce和throttle的区别：在demo中将debounce换成throttle可以很明显的看到区别，throttle中设置的间断时间并不会等待用户停止（空闲）后再进行赋值。这会导致请求两遍。</li></ul><p>遗留问题：</p><ul><li>为何要在data中设置函数，在method中设置为何回导致异步 + debounce 函数无法调用</li></ul>', '2018-7-30'),('关于MVVM模型的反思', '<p>本文只针对前端框架。</p><p>简单的来说，MVVM模型由下述三个部分组成：</p><p>View: HTML, 渲染数据</p><p>Model: JS, 定义数据，从接口获取数据，操作数据，业务逻辑层</p><p>ViewModel: 底层JS，用于同步View和Model，以及维护数据，本质还是操作DOM元素。</p><ol><li>视图层 - Compiler层：即&quot;指令编译器&quot;，对每个元素节点的指令进行扫描和解析。例如@click=&quot;functionX()&quot;，就是addEventListener(\'click\', functionX() {...})</li><li>数据层 - Observer层：和Angular.js的脏数据检查不通，Vue.js使用的是数据劫持方式，对于data进行遍历并重写它们的setter和getter方法，从而实现监控数据的调用(get)和数据的设定(set)。</li><li>VM层 - Watcher层：<ol><li>监控数据，更新视图；</li><li>监控指令，修改数据，更新视图；</li></ol></li></ol><p>还是不怎么理解。</p>', '2018-8-11'),('eslint + prettier + lint-staged代码校验配置方式回顾', '<p>基本目的：代码的风格需要统一，统一的代码风格也能降低项目出错的概率，例如能够校验v-for后是否加了:key，防止列表渲染出错。同时，为了提高效率，可以使用prettier自动将代码风格统一。</p><p>相关链接：</p><ul><li><a href="https://prettier.io/">prettier官网</a></li><li><a href="http://eslint.cn/docs/user-guide/configuring">eslint官网</a></li></ul><p>基本思路：</p><h3>增加的package文件：</h3><ul><li>prettier</li><li>eslint-config-prettier: Turns off all rules that are unnecessary or might conflict with Prettier.</li><li>eslint-plugin-prettier:Runs Prettier as an ESLint rule and reports differences as individual ESLint issues.</li><li>eslint-plugin-vue: Official ESLint plugin for Vue.js</li><li>vue-eslint-parser: The ESLint custom parser for .vue files, dependencies of eslint-plugin-vue.</li><li>lint-staged: Before committing your code, fun lint;</li><li>husky: Prevent bad commit</li></ul><pre><code>npm install --save-dev prettier eslint-config-prettier eslint-plugin-prettier eslint-plugin-vue vue-eslint-parser lint-staged husky vue-loader@13.7.2</code></pre><h3>修改eslint配置文件：</h3><pre><code>module.exports = {  root: true,  parser: \'vue-eslint-parser\',  parserOptions: {    parser: \'babel-eslint\',    ecmaVersion: 2017,    sourceType: \'module\'  },  env: {    browser: true,  },  // https://github.com/standard/standard/blob/master/docs/RULES-en.md  extends: [\'prettier\', \'plugin:vue/essential\'],  // required to lint *.vue files  // using \'html\' plugin will alert: &quot;warning  Delete `⏎`  prettier/prettier&quot;  plugins: [    \'prettier\'  ],  // add your custom rules here  \'rules\': {    \'prettier/prettier\': [\'warn\'],  }}</code></pre><h3>增加npm命令：</h3><ul><li>用prettier将文件统一：<code>&quot;format&quot;: &quot;prettier --write \'{src,config,mock}/**/*.{js,json,vue,less}\'&quot;</code></li><li>用eslint校验代码格式：<code>&quot;lint&quot;: &quot;eslint --ext .js,.vue src&quot;</code>，具体含义就是校验.js文件，.vue文件以及src目录下的文件。</li></ul><h3>增加.prettierrc文件：</h3><pre><code>{  &quot;printWidth&quot;: 120,  &quot;semi&quot;: true,  &quot;singleQuote&quot;: true,  &quot;trailingComma&quot;: &quot;es5&quot;}</code></pre><h3>增加git hooks配置：</h3><pre><code>  &quot;husky&quot;: {    &quot;hooks&quot;: {      &quot;pre-commit&quot;: &quot;lint-staged&quot;    }  },  &quot;lint-staged&quot;: {    &quot;*.{js,json,vue,less}&quot;: [      &quot;prettier --write&quot;,      &quot;git add&quot;    ]  },</code></pre>', '2018-8-2'),('购物车弹出框组件的构建回顾', '<p>基本目的：梳理知识点，举一反三的基础。</p>', '2018-8-9'),('步进器组件的构建回顾', '<p>目前曳光弹页面已经上传到gitlab.bitmain.com上了，在h5项目上已经用这个组件很长一段时间，但是将其抽象到组件库后发现，还有一些可以提高的地方。</p><ol><li><p>对于非数字的处理：首先设置input框的类型为number，并且将css覆盖input样式为textfield；当输入错误内容的时候，blur之后返回之前的数字，并且提示。</p></li><li><p>对于不符合规范的数字的处理：如果输入小于最小值，则在input的时候将value置为最小值，反之亦然。</p></li><li><p>数据传递：value为父组件入参；currentValue为当前组件参数；oldValue为上一次通过校验后的参数，在点击按钮以及blur的时候改变。</p></li></ol>', '2018-9-13'),('工作期回顾', '<p>在<a href="../%E5%B7%A5%E4%BD%9C%E5%9B%9E%E9%A1%BE%E4%BB%A5%E5%8F%8A%E6%9C%AA%E6%9D%A5%E6%89%93%E7%AE%97">之前的文章</a>中提到了我最近的回顾，侧重点在于每天的工作内容。其实，从入职到突然离职这整个快两年的工作周期内，我经历了如下的事情：</p><ol><li><p>老项目维护（试探）：刚进公司的时候，老的官网项目使用JSP写的，主要由后端主导。前端的工作只是写HTML以及CSS就行，JS上只是一些小的页面控制，工作量比较小。痛点在于，这个项目过老导致了CSS文件的耦合性非常的紧密，难以维护。</p></li><li><p>在框架的基础上增加功能：后来分配到了一个组主要是在liferay这个成熟的项目框架上构建功能（OKR），由于页面的HTML以及CSS无法控制，只能通过JS注入的方式来实现功能的增加，所以用到了大量的JS（主要是jQuery框架），整个组就只有两个后端一个前端，前端部分全部由我来实现。痛点在于，使用了闭源的框架导致了无法修改源码，开发上的阻碍过大。</p></li><li><p>老项目重构：官网项目由于需求的不断累加导致了不得不进行重构。具体重构流程从&quot;不怎么重要的&quot;售后开始练手，然后修改购物流程，最后修改首页和产品详情页，完成了初次的重构。由于这段时间不但要新使用以前不会的单页面前端框架（Vue.js整个体系），还要兼顾老项目的维护，工作量最为巨大，但是成长也十分快速。痛点在于，这种短平快的项目在需求设计以及UI设计之初就没有实现正确的项目流程，为了求稳，所有的需求都是参照老项目的代码。代码层的确重构了，但是&quot;需求层&quot;没有重构，导致了这次重构其实并没有获得高层的满意。</p></li><li><p>重构的扩展：在测试以及开发的努力下，项目上线后并没有较大问题，于是将重构进行扩展。具体扩展内容为增加H5页，个人中心页以及售后支持页。其中需要指出的是，H5页面只用了一个月开发，涉及到了之前的所有流程，任务量巨大。到个人中心的时候，还需要边开发边维护老项目以及之前重构的项目，最后也勉勉强强的上线了。之后的售后支持页比较简单。这个时候，对于开发、测试到上线的整体流程都非常熟悉，只是机械化的工作罢了。痛点就是需要维护多个页面，分散了较多精力。</p></li><li><p>第二次重构：之前的前端重构完成后一段时间组里又开展了后端的一些优化工作，前端这个时候任务量下降没啥事情。后来产品经理开始推新的一轮重构，由于&quot;种种原因&quot;，售后项目没有推起来，于是开始推动首页项目。这次重构需求更为复杂，基本上是做成了一个可配置的页面。复杂的配置页任务并没有分配给我（那个时候我在进行一些维护工作），最后我主要负责产品详情页面的展示。项目的痛点在于任务并没有进行比较清晰的分配，导致了耗费了一些无用的工作量。</p></li><li><p>离职前夕：18年很长一段时间的币价在下跌，导致了公司一整年也没有赚到多少钱。再加上年中的大量招人导致了公司的用人成本急剧上升。最为致命的是公司体量大，涵盖了研发、物料采购、生产、售后的一套流程，每一个流程都会耗费大量的资金，以及存在难以追查的黑幕。最终导致了公司的裁员浪潮。由于前端属于&quot;<a href="https://www.zhihu.com/question/307381805/answer/565152434">资源池</a>&quot;，在需求链中属于末置位，不可替代性弱，最终导致了自己的被裁员。</p></li></ol><p>总的来说，我在上家公司里经历了差不多有两次的项目循环周期，学到了很多东西。唯一的遗憾在于下班后的时间一直没有好好利用来提高自己，也没有懂得进一步扩展自己的圈子。这次被裁是一种提醒，也是一次机遇。希望下次也能进入这种福利好，管理扁平的公司。</p><p>一个公司肯定会有大大小小的问题，作为个体如何明哲保身？主要需要能够获取信息资源，培养自己的能力资源。做任何职业都需要这两种资源，可能在不同阶段这两类资源的侧重点不同。我的理解是，信息资源需要有广阔的交友圈子，能够通过各种方式获取自己想要的信息。能力资源需要自己能够让人将事情分配给自己，并能将事情做好。前者需要时间以及阅历，后者需要通过持续的自我学习来加以提高。</p>', '2019-1-5');COMMIT; SET FOREIGN_KEY_CHECKS = 1;